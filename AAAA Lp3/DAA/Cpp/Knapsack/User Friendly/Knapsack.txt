#include <bits/stdc++.h>
using namespace std;

struct Item {
  int weight;
  int value;
};

// Function to solve the knapsack problem using dynamic programming
int knapsack(int W, vector<Item> &items) {
  int n = items.size();
  vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

  for (int i = 1; i <= n; i++) {
    for (int w = 1; w <= W; w++) {
      if (items[i - 1].weight <= w) {
        dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - items[i - 1].weight] + items[i - 1].value);
      } else {
        dp[i][w] = dp[i - 1][w];
      }
    }
  }

  return dp[n][W];
}

int main() {
  int W, n;
  
  cout << "Welcome to the Knapsack Problem Solver!" << endl;
  cout << "Enter the capacity of the knapsack: ";
  cin >> W;

  cout << "Enter the number of items: ";
  cin >> n;

  vector<Item> items(n);
  cout << "Please enter the weight and value of each item:" << endl;

  for (int i = 0; i < n; i++) {
    cout << "Item " << i + 1 << " - Weight: ";
    cin >> items[i].weight;
    cout << "Item " << i + 1 << " - Value: ";
    cin >> items[i].value;
  }

  int max_value = knapsack(W, items);
  cout << "\nMaximum value that can be obtained: " << max_value << endl;

  cout << "Thank you for using the Knapsack Problem Solver!" << endl;
  return 0;
}
